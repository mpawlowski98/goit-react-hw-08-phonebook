{"version":3,"file":"static/js/88.512a5665.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/App.module.css?42a9","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"containter\":\"App_containter__E6dKY\",\"contactForm\":\"App_contactForm__jqKMO\",\"input\":\"App_input__dhOLQ\",\"addContact\":\"App_addContact__n7yYk\"};","import { nanoid } from 'nanoid';\nimport React, { useState } from 'react';\nimport { selectContacts } from 'redux/contacts/contactsSlice';\nimport { useSelector } from 'react-redux';\nimport css from 'App.module.css';\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const contactExists = contacts.some(contact => contact.name === name);\n\n    if (contactExists) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    onSubmit({ id: nanoid(), name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.contactForm}>\n      <label>\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          title=\"Name\"\n          required\n        />\n      </label>\n\n      <label>\n        Phone number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          title=\"Phone number\"\n          required\n        />\n      </label>\n\n      <button className={css.addContact} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","function ContactListItem({ name, number, onDelete }) {\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"button\" onClick={onDelete}>\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default ContactListItem;\n","import { deleteContact } from 'redux/contacts/operations';\nimport { selectFilteredContacts } from '../../redux/contacts/contactsSlice';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ContactList() {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          onDelete={() => handleDeleteContact(id)}\n        />\n      ))}\n    </ul>\n  );\n}\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from 'App.module.css';\nimport { selectFilter, setFilter } from '../../redux/contacts/contactsSlice';\n\nfunction Filter() {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  return (\n    <label>\n      Find contacts by name\n      <input\n        className={css.input}\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilter,\n  setFilter,\n  loadContacts,\n} from 'redux/contacts/contactsSlice';\nimport { useEffect } from 'react';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(loadContacts());\n  }, [dispatch]);\n\n  const handleSubmit = contact => {\n    dispatch(addContact(contact));\n  };\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const getFilteredContacts = () => {\n    if (filter) {\n      return contacts.filter(({ name }) =>\n        name.toLowerCase().includes(filter.toLowerCase())\n      );\n    }\n  };\n\n  const filteredContacts = getFilteredContacts();\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm contacts={contacts} onSubmit={handleSubmit} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={handleFilterChange} />\n      <ContactList contacts={filteredContacts} onDelete={handleDeleteContact} />\n    </div>\n  );\n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","onSubmit","useState","name","setName","number","setNumber","contacts","useSelector","selectContacts","handleChange","event","target","value","preventDefault","some","contact","alert","className","css","type","onChange","title","required","onDelete","onClick","selectFilteredContacts","dispatch","useDispatch","map","deleteContact","handleDeleteContact","selectFilter","e","setFilter","Contacts","filter","useEffect","fetchContacts","loadContacts","filteredContacts","toLowerCase","includes","getFilteredContacts","addContact"],"sourceRoot":""}